{"version":3,"sources":["vschoolProducts.js","Product.js","App.js","serviceWorker.js","index.js"],"names":["products","id","name","price","description","Product","props","productData","App","product","productsData","map","data","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmDeA,G,KAnDE,CACb,CACIC,GAAI,IACJC,KAAM,SACNC,MAAO,EACPC,YAAa,sEAEjB,CACIH,GAAI,IACJC,KAAM,UACNC,MAAO,EACPC,YAAa,yEAEjB,CACIH,GAAI,IACJC,KAAM,kBACNC,MAAO,IACPC,YAAa,sCAEjB,CACIH,GAAI,IACJC,KAAM,SACNC,MAAO,EACPC,YAAa,YAEjB,CACIH,GAAI,IACJC,KAAM,SACNC,MAAO,EACPC,YAAa,gBAEjB,CACIH,GAAI,IACJC,KAAM,iBACNC,MAAO,EACPC,YAAa,mDAEjB,CACIH,GAAI,IACJC,KAAM,iBACNC,MAAO,GACPC,YAAa,oDAEjB,CACIH,GAAI,IACJC,KAAM,cACNC,MAAO,GACPC,YAAa,4CCnCNC,MAVf,SAAiBC,GAChB,OACG,6BACC,6CAAmBA,EAAMC,YAAYL,MACrC,uCAAaI,EAAMC,YAAYJ,MAA/B,OACA,2CAAiBG,EAAMC,YAAYH,eCqBzBI,MAff,WAEC,IAAMC,EAAUC,EAAaC,KAAI,SAACC,GACjC,OACK,kBAAC,EAAD,CAASC,IAAKD,EAAKX,GAAIM,YAAaK,OAIzC,OACE,6BACGH,ICXaK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a724b127.chunk.js","sourcesContent":["const products = [\r\n    {\r\n        id: \"1\",\r\n        name: \"Pencil\",\r\n        price: 1,\r\n        description: \"Perfect for those who can't remember things! 5/5 Highly recommend.\"\r\n    },\r\n    {\r\n        id: \"2\",\r\n        name: \"Housing\",\r\n        price: 0,\r\n        description: \"Housing provided for out-of-state students or those who can't commute\"\r\n    },\r\n    {\r\n        id: \"3\",\r\n        name: \"Computer Rental\",\r\n        price: 300,\r\n        description: \"Don't have a computer? No problem!\"\r\n    },\r\n    {\r\n        id: \"4\",\r\n        name: \"Coffee\",\r\n        price: 2,\r\n        description: \"Wake up!\"\r\n    },\r\n    {\r\n        id: \"5\",\r\n        name: \"Snacks\",\r\n        price: 0,\r\n        description: \"Free snacks!\"\r\n    },\r\n    {\r\n        id: \"6\",\r\n        name: \"Rubber Duckies\",\r\n        price: 3,\r\n        description: \"To help you solve your hardest coding problems.\"\r\n    },\r\n    {\r\n        id: \"7\",\r\n        name: \"Fidget Spinner\",\r\n        price: 21,\r\n        description: \"Because we like to pretend we're in high school.\"\r\n    },\r\n    {\r\n        id: \"8\",\r\n        name: \"Sticker Set\",\r\n        price: 14,\r\n        description: \"To prove to other devs you know a lot.\"\r\n    }\r\n]\r\n\r\nexport default products","import React from 'react';\r\n\r\nfunction Product(props) {\r\n\treturn(\r\n   \t<div>\r\n   \t\t<h1>Product Name: {props.productData.name}</h1>\r\n   \t\t<h2>Price: R{props.productData.price}.00</h2>\r\n   \t\t<p>Description: {props.productData.description}</p>\r\n   \t</div>\r\n  );\r\n}\r\n\r\nexport default Product;","/* \nGiven a list of products (as an array of objects, as seen in productsData.js)\nrender a <Product /> component (which you'll also need to create) for each\nproduct in the list.\n\nMake sure to use the array's `.map()` method to create these components, and \ndon't forget to pass a `key` prop to it to avoid the warning.\n*/\n\nimport React from \"react\";\nimport productsData from \"./vschoolProducts\";\nimport Product from './Product';\n\nfunction App() {\n\n\tconst product = productsData.map((data) => {\n\t\treturn(\n       <Product key={data.id} productData={data} />\n    )\n\t})\n\n  return (\n    <div>\n      {product}\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}